package jp.mzw.ajaxmutator.mutator;

import java.util.List;

import jp.mzw.ajaxmutator.mutatable.Mutatable;
import jp.mzw.ajaxmutator.generator.Mutation;

/**
 * Class that responsible for produce {@link jp.mzw.ajaxmutator.mutation_generator.Mutation} to given
 * {@link Mutatable}. Subclass who want to implement this interface SHOULD
 * inherit {@link AbstractMutator} or its subclasses.
 *
 * @param <T> subclass of {@link Mutatable} to which mutation can be generated.
 */
public interface Mutator<T extends Mutatable> {
    /**
     * @return if this Mutator is applicable to given class, which basically
     * means if c is a or subclass of a T. This method is requied because type
     * parameter T is lost at runtime.
     */
    public boolean isApplicable(Class<?> c);

    /**
     * @return node that can replace mutation target. When appropriate node does
     *         not exist or cannot be found, returns null.
     */
    public List<Mutation> generateMutationList(T originalNode);

    /**
     * @return Understandable name of the class of mutation generated by this
     * mutator.
     */
    public String mutationName();
}
